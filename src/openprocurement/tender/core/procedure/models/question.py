from openprocurement.api.models import ValidationError, IsoDateTimeType, Model
from openprocurement.tender.core.procedure.models.base import ModelType, ListType
from openprocurement.tender.core.procedure.models.organization import Organization
from schematics.types import StringType, MD5Type


class Question(Model):
    id = MD5Type(required=True)
    author = ModelType(
        Organization, required=True
    )  # who is asking question (contactPoint - person, identification - organization that person represents)
    title = StringType(required=True)  # title of the question
    description = StringType()  # description of the question
    date = IsoDateTimeType()  # autogenerated date of posting
    answer = StringType()  # only tender owner can post answer
    questionOf = StringType(required=True, choices=["tender", "item", "lot"], default="tender")
    relatedItem = StringType(min_length=1)
    dateAnswered = IsoDateTimeType()


def validate_questions_related_items(data, questions):
    if questions:
        item_ids = {i.id for i in data.get("items") or []}
        lot_ids = {i.id for i in data.get("lots") or []}

        for q in questions:
            related_item = q.relatedItem
            question_of = q.questionOf
            if not related_item and question_of in ("item", "lot"):
                raise ValidationError("This field is required.")

            if question_of == "item":
                if related_item not in item_ids:
                    raise ValidationError([{'relatedItem': ['relatedItem should be one of items']}])

            elif question_of == "lot" and related_item not in lot_ids:
                raise ValidationError([{'relatedItem': ['relatedItem should be one of lots']}])
